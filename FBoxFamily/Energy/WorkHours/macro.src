$SKIP
;;*******************************************************************************
;; WorkingHour FBox | v1.0.0 | 08.05.2021 14:03Z
;; Copyright (C) 2020 Marina Egner <info@sheepindustries.de>
;; Author: Marina Egner
;;
;; This program is free software: you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the
;; Free Software Foundation, either version 3 of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
;; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
;; See the GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License along with this program.
;; If not, see <https://www.gnu.org/licenses/>.
;; *******************************************************************************
;;
;; REVISION HISTORY
;; v0.1.0  22.02.2021 - M.Egner | Initial edit;
;; v0.1.1  22.02.2021 - M.Egner | Skip Program after Init;
;; v1.0.0  08.05.2021 - M.Egner | changed Adjust Parameters;
;;
;; DESCRIPTION
;; The Fbox counts every switch on and counts the working time
$ENDSKIP

$REPORT SindFamily: WorkHours | FBox v1.0.0
; Check if Firmware version in DC is new enought, cause special condition codes where in use
$IF S.CPU.MinFWVersion < 12000
$FATAL SindFamily: Configured Firmware in Device Configurator is too Old! FBox needs min 1.20.00.
$ENDIF
$IFNB <name#vers> ; Not in use
$ENDIF

$IFNDEF _HEAVAC._VERS._HEAVAC
$FATAL Bitte zuerst Heavac-Init FBox platzieren!
$ENDIF
;            ###################################################################
;             ==================================== Init constants
;cWaitingTime  EQU    K 3600                      ; Time of 1/10 Hour
;             ------------------------------------
;;dNeedModify   LEQU   dyn_Flag                  ; Indicate if Modify need to be Change
;             ------------------------------------ Init dynamic Register
;dResult       LEQU   dynRegister                 ; Temp Var for Result
;             ------------------------------------ Init dynamic Flags
sDynEdge      LEQU   stcFlags                    ; Flag for rising Edge detektion
;             ------------------------------------ Init static Register
sStartTime    LEQU   stcRegister                 ; Time since enable has set
sWaitingTime  LEQU   stcRegister+1               ; Time of 1/10 Hour
;             ------------------------------------
;            ###################################################################


;             ==================================== Init if Heavac Init is activ
              STH    _HEAVAC._RESET._EXEC        ;
              JR     L RUN                       ;
;             ------------------------------------              
INIT:
;             ==================================== Init Vars
              ACC    H                           ;
              RES    sDynEdge                    ;
;             ------------------------------------ 
              LD     stcHours                    ;
                     adjHours                    ;
              LD     stcCount                    ;
                     adjCount                    ;
              LD     sWaitingTime                ;
                     360000                      ;
              JR     lEnd                        ; End Init Skip Program                     
;             ------------------------------------
RUN:
;             ------------------------------------
              STH    inEnable                    ; if Input is high
              DYN    sDynEdge                    ; and is rising edge
              JR     L lNext                     ; else go next 
              INC    stcCount                    ; then increment counter
;             ------------------------------------
lStartTimer:
;             ------------------------------------ after edge detection or timer is elapsed
              SYSRD  K 7000                      ; Read System Counter
                     sStartTime                  ;
;             ------------------------------------
lNext:
;             ------------------------------------
              STL    inEnable                    ; if Input is low
              JR     H lEnd                      ; then nothing to do
              SYSCMP sStartTime                  ; compare System Counter to StartTime
                     sWaitingTime                ; + Waiting Time
              JR     H lEnd                      ; if lower the goto the end
              INC    stcHours                    ; else increment Hour counter
              JR     lStartTimer                 ; then start timer again
;             ------------------------------------
lEnd:
;             ------------------------------------
              COPY   stcHours                    ; copy hours
                     outHours                    ; to output
              COPY   stcCount                    ; copy counter
                     outCount                    ; to output
;             ====================================              

; ======================================================================
; -------- Externe Funktionserweiterung
; ======================================================================
;
; ---------------------------------------------------------
$IFEXIST "<$DevDir>\AddOn\AddOn\AddOn_SIND_WorkHours.src"
$INCLUDE "<$DevDir>\AddOn\AddOn\AddOn_SIND_WorkHours.src"
$ELSE
; ---------------------------------------------------------
$IFEXIST "<$ProjDir>\AddOn\AddOn\AddOn_SIND_WorkHours.src"
$INCLUDE "<$ProjDir>\AddOn\AddOn\AddOn_SIND_WorkHours.src"
$ENDIF
$ENDIF
